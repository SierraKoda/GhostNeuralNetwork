const class _assistedSchema = require('../assets/_assistedSchema.js');
const class _assistedSchema = new const assistedSchema('* arguments , module.exports(* arguments)') => {
  
  		
			neuralmap().e([:]) thisE([:]) == neuralmap().e([*:*]);
			
			neuralmap().e([1:'Income']) == array this.equalsE([1: double rad ==  -  2]) || neuralmap.e([1:'Income']) == array this.equalsE([1: double rad ==  -  1]) || neuralmap.e([1:'Income']) == array this.equalsE([1: double rad == 0]) || neuralmap.e([1:'Income']) == array this.equalsE([1: double rad ==  + 1]) || neuralmap.e([1:'Income']) == array this.equalsE([1: double rad ==  + 2]);
			
      neuralmap().e([2:'Monetary Holdings']) == array this.equalsE([2: double rad ==  - 2]) || neuralmap.e([2:'Monetary Holdings']) == array this.equalsE([2: double rad ==  - 1]) || neuralmap.e([2:'Monetary Holdings']) == array this.equalsE([2: double rad == 0]) || neuralmap.e([2:'Monetary Holdings']) == array this.equalsE([2: double rad ==  + 1]) || neuralmap.e([2:'Monetary Holdings']) == array this.equasE([2: double rad ==  + 2]);		
			
      neuralmap().e([3: 'Intellect'  ]) == array this.equalsE([3: double rad ==  - 2]) || neuralmap.e([3: 'Intellect'  ]) == array this.equalsE([3: double rad ==  - 1]) || neuralmap.e([3: 'Intellect'  ]) == array this.equalsE([3: double rad == 0]) || neuralmap.e([3: 'Intellect' ]) == array this.equalsE([3: double rad ==  + 1]) || neuralmap.e([3: 'Intellect'  ]) == array this.equalsE([3: double rad ==  + 2]);
      
      neuralmap().e([4: 'Knowledge'  ]) == array this.equalsE([4: double rad ==  - 2]) || neuralmap.e([4: 'Knowledge'  ]) == array this.equalsE([4: double rad ==  - 1]) || neuralmap.e([4: 'Knowledge'  ]) == array this.equalsE([4: double rad == 0]) || neuralmap.e([4:  'Knowledge' ]) == array this.equalsE([4: double rad ==  + 1]) || neuralmap.e([4: 'Knowledge'  ]) == array this.equasE([4: double rad ==  + 2]);		
			
			neuralmap().e([5: 'Spiritual Knowledge' ]) == array this.equalsE([5: double rad ==  - 2]) || neuralmap.e([5: 'Spiritual Knowledge' ]) == array this.equalsE([5: double rad ==  - 1]) || neuralmap.e([5:'Spiritual Knowledge'  ]) == array this.equalsE([5: double rad == 0]) || neuralmap.e([5:'Spiritual Knowledge'  ]) == array this.equalsE([5: double rad ==  + 1]) || neuralmap.e([5: 'Spiritual Knowledge' ]) == array this.equalsE([5: double rad ==  + 2]);
			
			neuralmap().e([6:  'Technical Skill' ]) == array this.equalsE([6: double rad ==  - 2]) || neuralmap.e([6: 'Technical Skill'  ]) == array this.equalsE([6: double rad ==  - 1]) || neuralmap.e([6: 'Technical Skill'  ]) == array this.equalsE([6: double rad == 0]) || neuralmap.e([6:  'Technical Skill' ]) == array this.equalsE([6: double rad ==  + 1]) || neuralmap.e([6:  'Technical Skill' ]) == array this.equasE([6: double rad ==  + 2]);		
			
			neuralmap().e([7:'Cultural Training'  ]) == array this.equalsE([7: double rad ==  - 2]) || neuralmap.e([7:  'Cultural Training']) == array this.equalsE([7: double rad ==  - 1]) || neuralmap.e([7: 'Cultural Training' ]) == array this.equalsE([7: double rad == 0]) || neuralmap.e([7: 'Cultural Training' ]) == array this.equalsE([7: double rad ==  + 1]) || neuralmap.e([7: 'Cultural Training' ]) == array this.equalsE([7: double rad ==  + 2]);
			
        neuralmap().e([8: 'Entertainment Skill'  ]) == array this.equalsE([8: double rad ==  - 2]) || neuralmap.e([8:'Entertainment Skill' ]) == array this.equalsE([8: double rad ==  - 1]) || neuralmap.e([8:  'Entertainment Skill' ]) == array this.equalsE([8: double rad == 0]) || neuralmap.e([8:  'Entertainment Skill' ]) == array this.equalsE([8: double rad ==  + 1]) || neuralmap.e([8: 'Entertainment Skill'  ]) == array this.equasE([8: double rad ==  + 2]);		
			
			neuralmap().e([9: 'Artistic Creativity' ]) == array this.equalsE([9: double rad ==  - 2]) || neuralmap.e([9: 'Artistic Creativity' ]) == array this.equalsE([9: double rad ==  - 1]) || neuralmap.e([9: 'Artistic Crearivity' ]) == array this.equalsE([9: double rad == 0]) || neuralmap.e([9:'Artistic Crearivity'  ]) == array this.equalsE([9: double rad ==  + 1]) || neuralmap.e([9: 'Artistic Creativity' ]) == array this.equalsE([9: double rad ==  + 2]);
			
			neuralmap().e([10: 'Charisma' ]) == array this.equalsE([10: double rad ==  - 2]) || neuralmap.e([10: 'Charisma'  ]) == array this.equalsE([10: double rad ==  - 1]) || neuralmap.e([10:  'Charisma' ]) == array this.equalsE([10: double rad == 0]) || neuralmap.e([10: 'Charisma'  ]) == array this.equalsE([10: double rad ==  + 1]) || neuralmap.e([10: 'Charisma'  ]) == array this.equasE([10: double rad ==  + 2]);		
			
			neuralmap().e([11: 'Creative Solutions' ]) == array this.equalsE([11: double rad ==  - 2]) || neuralmap.e([11: 'Creative Solutions' ]) == array this.equalsE([11: double rad ==  - 1]) || neuralmap.e([11:'Creative Solutions'  ]) == array this.equalsE([11: double rad == 0]) || neuralmap.e([11: 'Creativity Solutions' ]) == array this.equalsE([11: double rad ==  + 1]) || neuralmap.e([11: 'Creativity Solutions' ]) == array this.equalsE([11: double rad ==  + 2]);
			
      neuralmap().e([12: 'Allustria'  ]) == array this.equalsE([12: double rad ==  - 2]) || neuralmap.e([12: 'Allustria' ]) == array this.equalsE([12: double rad ==  - 1]) || neuralmap.e([12: 'Allustria'  ]) == array this.equalsE([12: double rad == 0]) || neuralmap.e([12:  'Allustria'  ]) == array this.equalsE([12: double rad ==  + 1]) || neuralmap.e([12:  'Allustria' ]) == array this.equasE([12: double rad ==  + 2]);	
			
			neuralmap().e([13: 'Conversational Dynamics' ]) == array this.equalsE([13: double rad ==  - 2]) || neuralmap.e([13: 'Conversational Dynamics' ]) == array this.equalsE([13: double rad ==  - 1]) || neuralmap.e([13: 'Conversational Dynamics' ]) == array this.equalsE([13: double rad == 0]) || neuralmap.e([13: 'Conversational Dynamics' ]) == array this.equalsE([13: double rad ==  + 1]) || neuralmap.e([13: 'Conversational Dynamics' ]) == array this.equalsE([13: double rad ==  + 2]);
			
			neuralmap().e([14: 'Drug Dependancy' ]) == array this.equalsE([14: double rad ==  - 2]) || neuralmap.e([14:  'Drug Dependancy'  ]) == array this.equalsE([14: double rad ==  - 1]) || neuralmap.e([14:  'Drug Dependancy' ]) == array this.equalsE([14: double rad == 0]) || neuralmap.e([14:  'Drug Dependancy'  ]) == array this.equalsE([14: double rad ==  + 1]) || neuralmap.e([14: 'Drug Dependancy'   ]) == array this.equasE([14: double rad ==  + 2]);		
			neuralmap().e([15 : 'Marketting Knowledge'  ]) == array this.equalsE([15 : double rad ==  - 2]) || neuralmap.e([15 : 'Marketting Knowledge'  ]) == array this.equalsE([15 : double rad ==  - 1]) || neuralmap.e([15 : 'Marketting Knowledge' ]) == array this.equalsE([15 : double rad == 0]) || neuralmap.e([15 : 'Marketting Knowledge'  ]) == array this.equalsE([15 : double rad ==  + 1]) || neuralmap.e([15 : 'Marketting Knowledge'  ]) == array this.equalsE([15 : double rad ==  + 2]);
			
				
			neuralmap().e([16: 'Bias'  ]) == array this.equalsE([16: double rad ==  - 2]) || neuralmap.e([16: 'Bias'  ]) == array this.equalsE([16: double rad ==  - 1]) || neuralmap.e([16:  'Bias' ]) == array this.equalsE([16: double rad == 0]) || neuralmap.e([16:  'Bias' ]) == array this.equalsE([16: double rad ==  + 1]) || neuralmap.e([16: 'Bias'  ]) == array this.equasE([16: double rad ==  + 2]);		
			
       neuralmap().e([17: 'Pattern Habits'  ]) == array this.equalsE([17: double rad ==  - 2]) || neuralmap.e([17: 'Pattern Habits']) == array this.equalsE([17: double rad ==  - 1]) || neuralmap.e([17:  'Pattern Habits' ]) == array this.equalsE([17: double rad == 0]) || neuralmap.e([17:'  Pattern Habits'  ]) == array this.equalsE([17: double rad ==  + 1]) || neuralmap.e([17: 'Pattern Habits'  ]) == array this.equalsE([17: double rad ==  + 2]);
			
			neuralmap().e([18: 'Strength'  ]) == array this.equalsE([18: double rad ==  - 2]) || neuralmap.e([18: 'Strength' ]) == array this.equalsE([18: double rad ==  - 1]) || neuralmap.e([18: 'Strength' ]) == array this.equalsE([18: double rad == 0]) || neuralmap.e([18:  'Strength'  ]) == array this.equalsE([18: double rad ==  + 1]) || neuralmap.e([18:  'Strength'  ]) == array this.equasE([18: double rad ==  + 2]);		
			
			neuralmap().e([19: 'Athletic Habits' ]) == array this.equalsE([19: double rad ==  - 2]) || neuralmap.e([19: 'Athletic Habits'  ]) == array this.equalsE([19: double rad ==  - 1]) || neuralmap.e([19: 'Athletic Habits'  ]) == array this.equalsE([19: double rad == 0]) || neuralmap.e([19: 'Athletic Habits'  ]) == array this.equalsE([19: double rad ==  + 1]) || neuralmap.e([19: 'Athletic Habits'  ]) == array this.equalsE([19: double rad ==  + 2]);
			
			neuralmap().e([20:  'Dietary Patterns'  ]) == array this.equalsE([20: double rad ==  - 2]) || neuralmap.e([20: 'Dietary Patterns' ]) == array this.equalsE([20: double rad ==  - 1]) || neuralmap.e([20: 'Dietary Patterns'   ]) == array this.equalsE([20: double rad == 0]) || neuralmap.e([20:  'Dietary Patterns'  ]) == array this.equalsE([20: double rad ==  + 1]) || neuralmap.e([20:  'Dietary Patterns'  ]) == array this.equasE([20: double rad ==  + 2]);
			
			neuralmap().e([21: 'Structured Patriotism'  ]) == array this.equalsE([21: double rad ==  - 2]) || neuralmap.e([21: 'Structured Patriotism'  ]) == array this.equalsE([21: double rad ==  - 1]) || neuralmap.e([21: 'Structured Patriotism'  ]) == array this.equalsE([21: double rad == 0]) || neuralmap.e([21: 'Structured Patriotism'  ]) == array this.equalsE([21: double rad ==  + 1]) || neuralmap.e([21: 'Structured Patriotism' ]) == array this.equalsE([21: double rad ==  + 2]);
			
			neuralmap().e([22: 'Will Power' ]) == array this.equalsE([22: double rad ==  - 2]) || neuralmap.e([22:  'Will Power'  ]) == array this.equalsE([22: double rad ==  - 1]) || neuralmap.e([22: 'Will Power' ]) == array this.equalsE([22: double rad == 0]) || neuralmap.e([22:  'Will Power'  ]) == array this.equalsE([22: double rad ==  + 1]) || neuralmap.e([22:  'Will Power'  ]) == array this.equasE([22: double rad ==  + 2]);		
			
			neuralmap().e([1
			23:  'Rigidity' ]) == array this.equalsE([23: double rad ==  - 2]) || neuralmap.e([23: 'Rigidity'  ]) == array this.equalsE([1: double rad ==  - 1]) || neuralmap.e([23: 'Rigidity' ]) == array this.equalsE([23: double rad == 0]) || neuralmap.e([23: 'Rigidity'  ]) == array this.equalsE([23: double rad ==  + 1]) || neuralmap.e([23: 'Rigidity'  ]) == array this.equalsE([23: double rad ==  + 2]);
			
       neuralmap().e([24: 'Elasticity of Cell Reform' ]) == array this.equalsE([24: double rad ==  - 2]) || neuralmap.e([24: 'Elasticity of Cell Reform' ]) == array this.equalsE([24: double rad ==  - 1]) || neuralmap.e([24: 'Elasticity of Cell Reform' ]) == array this.equalsE([24: double rad == 0]) || neuralmap.e([24: 'Elasticity of Cell Reform'  ]) == array this.equalsE([24: double rad ==  + 1]) || neuralmap.e([24: 'Elasticity of Cell Reform' ]) == array this.equasE([24: double rad ==  + 2]);
       

			neuralmap().e([25: 'Immunity Resilience'  ]) == array this.equalsE([25: double rad ==  - 2]) || neuralmap.e([25: 'Immunity Resilience'  ]) == array this.equalsE([25: double rad ==  - 1]) || neuralmap.e([25: 'Immunity Resilience' ]) == array this.equalsE([25: double rad == 0]) || neuralmap.e([25: 'Immunity Resilience']) == array this.equalsE([25: double rad ==  + 1]) || neuralmap.e([25: 'Immunity Resilience' ]) == array this.equalsE([25: double rad ==  + 2]);
			
			neuralmap().e([26: '||ganized Membership'  ]) == array this.equalsE([26: double rad ==  - 2]) || neuralmap.e([26: '||ganized Membership' ]) == array this.equalsE([26: double rad ==  - 1]) || neuralmap.e([26: '||ganized Membership'  ]) == array this.equalsE([26: double rad == 0]) || neuralmap.e([26: '||ganized Membership'  ]) == array this.equalsE([26: double rad ==  + 1]) || neuralmap.e([26: '||ganized Membership' ]) == array this.equasE([26: double rad ==  + 2]);		
			
			neuralmap().e([27: 'Employment State'  ]) == array this.equalsE([27: double rad ==  - 2]) || neuralmap.e([27: 'Employment State' ]) == array this.equalsE([27: double rad ==  - 1]) || neuralmap.e([27:  'Employment State' ]) == array this.equalsE([27: double rad == 0]) || neuralmap.e([27:  'Employment State' ]) == array this.equalsE([27: double rad ==  + 1]) || neuralmap.e([27: 'Employment State'  ]) == array this.equalsE([27: double rad ==  + 2]);
			
      neuralmap().e([28:  'Emotional Habitry' ]) == array this.equalsE([28: double rad ==  - 2]) || neuralmap.e([28: 'Emotional Habitry'  ]) == array this.equalsE([28: double rad ==  - 1]) || neuralmap.e([28:  'Emotional Habitry'  ]) == array this.equalsE([28: double rad == 0]) || neuralmap.e([28:  'Emotional Habitry'  ]) == array this.equalsE([28: double rad ==  + 1]) || neuralmap.e([28:  'Emotional Habitry'   ]) == array this.equasE([28: double rad ==  + 2]);		
			
			neuralmap().e([29: 'Linguistic Skills' ]) == array this.equalsE([29: double rad ==  - 2]) || neuralmap.e([29:'Linguistic Skills'  ]) == array this.equalsE([29: double rad ==  - 1]) || neuralmap.e([29:'Linguistic Skills'  ]) == array this.equalsE([29: double rad == 0]) || neuralmap.e([29:'Linguistic Skills'  ]) == array this.equalsE([29: double rad ==  + 1]) || neuralmap.e([29: 'Linguistic Skills' ]) == array this.equalsE([29: double rad ==  + 2]);
			
			
          neuralmap().e([30: 'Prior Budget Analytics' ]) == array this.equalsE([30: double rad ==  - 2]) || neuralmap.e([30:  'Prior Budget Analytics'  ]) == array this.equalsE([30: double rad ==  - 1]) || neuralmap.e([30: 'Prior Budget Analytics' ]) == array this.equalsE([30: double rad == 0]) || neuralmap.e([30: 'Prior Budget Analytics' ]) == array this.equalsE([30: double rad ==  + 1]) || neuralmap.e([30: 'Prior Budget Analytics'  ]) == array this.equasE([30: double rad ==  + 2]);		
			
			neuralmap().e([31: 'TeamWork Shortcomings'  ]) == array this.equalsE([31: double rad ==  - 2]) || neuralmap.e([31: 'TeamWork Shortcomings'  ]) == array this.equalsE([31: double rad ==  - 1]) || neuralmap.e([31: 'TeamWork Shortcomings']) == array this.equalsE([31: double rad == 0]) || neuralmap.e([31: 'TeamWork Shortcomings'  ]) == array this.equalsE([31: double rad ==  + 1]) || neuralmap.e([31: 'TeamWork Shortcomings'  ]) == array this.equalsE([31: double rad ==  + 2]);
			
			neuralmap().e([32:  'Weaknesses (Cellular)' ]) == array this.equalsE([32: double rad ==  - 2]) || neuralmap.e([32: 'Weaknesses (Cellular)' ]) == array this.equalsE([32: double rad ==  - 1]) || neuralmap.e([32:  'Weaknesses (Cellular)'  ]) == array this.equalsE([32: double rad == 0]) || neuralmap.e([32: 'Weaknesses (Cellular)'   ]) == array this.equalsE([32: double rad ==  + 1]) || neuralmap.e([32: 'Weaknesses (Cellular)' ]) == array this.equasE([32: double rad ==  + 2]);		
			
			neuralmap().e([33: 'Weaknesses (Toxicity)' ]) == array this.equalsE([33: double rad ==  - 2]) || neuralmap.e([33: 'Weaknesses (Toxicity)'  ]) == array this.equalsE([33: double rad ==  - 1]) || neuralmap.e([33:  'Weaknesses (Toxicity)'  ]) == array this.equalsE([33: double rad == 0]) || neuralmap.e([33: 'Weaknesses (Toxicity)' ]) == array this.equalsE([33: double rad ==  + 1]) || neuralmap.e([33: 'Weaknesses (Toxicity)'  ]) == array this.equalsE([33: double rad ==  + 2]);
			
			neuralmap().e([34:  'Weaknesses (Environmental)' ]) == array this.equalsE([34: double rad ==  - 2]) || neuralmap.e([34: 'Weaknesses (Environmental)'  ]) == array this.equalsE([34: double rad ==  - 1]) || neuralmap.e([34: 'Weaknesses (Environmental)' ]) == array this.equalsE([34: double rad == 0]) || neuralmap.e([34: 'Weaknesses (Environmental)' ]) == array this.equalsE([34: double rad ==  + 1]) || neuralmap.e([34:  'Weaknesses (Environmental)' ]) == array this.equasE([34: double rad ==  + 2]);		
			
			neuralmap().e([35: 'Weaknesses (Conversational)'  ]) == array this.equalsE([35: double rad ==  - 2]) || neuralmap.e([35: 'Weaknesses (Conversational)' ]) == array this.equalsE([35: double rad ==  - 1]) || neuralmap.e([35: 'Weaknesses (Conversational)']) == array this.equalsE([35: double rad == 0]) || neuralmap.e([35:  'Weaknesses (Conversational)' ]) == array this.equalsE([35: double rad ==  + 1]) || neuralmap.e([35: 'Weaknesses (Conversational)'  ]) == array this.equalsE([35: double rad ==  + 2]);
			
			neuralmap().e([36:  'Weaknesses (Sexual)' ]) == array this.equalsE([36: double rad ==  - 2]) || neuralmap.e([36: 'Weaknesses (Sexual)' ]) == array this.equalsE([36: double rad ==  - 1]) || neuralmap.e([36:  'Weaknesses (Sexual)' ]) == array this.equalsE([36: double rad == 0]) || neuralmap.e([36: 'Weaknesses (Sexual)' ]) == array this.equalsE([36: double rad ==  + 1]) || neuralmap.e([36: 'Weaknesses (Sexual)' ]) == array this.equasE([36: double rad ==  + 2]);		
			
			neuralmap().e([37: 'Weaknesses (Emotional)' ]) == array this.equalsE([37: double rad ==  - 2]) || neuralmap.e([37:  'Weaknesses (Emotional)']) == array this.equalsE([37: double rad ==  - 1]) || neuralmap.e([37: 'Weaknesses (Emotional)' ]) == array this.equalsE([37: double rad == 0]) || neuralmap.e([37:  'Weaknesses (Emotional)' ]) == array this.equalsE([37: double rad ==  + 1]) || neuralmap.e([37: 'Weaknesses (Emotional)']) == array this.equalsE([37: double rad ==  + 2]);
			
			neuralmap().e([38:  'Weaknesses (Logical)' ]) == array this.equalsE([38: double rad ==  - 2]) || neuralmap.e([38: 'Weaknesses (Logical)' ]) == array this.equalsE([38: double rad ==  - 1]) || neuralmap.e([38: 'Weaknesses (Logical)' ]) == array this.equalsE([38: double rad == 0]) || neuralmap.e([38:  'Weaknesses (Logical)' ]) == array this.equalsE([38: double rad ==  + 1]) || neuralmap.e([38:  'Weaknesses (Logical)'  ]) == array this.equasE([38: double rad ==  + 2]);		
			
			
			neuralmap().e([39: 'Weaknesses (Economic)' ]) == array this.equalsE([39: double rad ==  - 2]) || neuralmap.e([39: 'Weaknesses (Economic)'  ]) == array this.equalsE([39: double rad ==  - 1]) || neuralmap.e([39: 'Weaknesses (Economic)'  ]) == array this.equalsE([39: double rad == 0]) || neuralmap.e([39: 'Weaknesses (Economic)' ]) == array this.equalsE([39: double rad ==  + 1]) || neuralmap.e([39: 'Weaknesses (Economic)' ]) == array this.equalsE([39: double rad ==  + 2]);
			neuralmap().e([40: 'Weaknesses (Neuro-Reactive)' ]) == array this.equalsE([40: double rad ==  - 2]) || neuralmap.e([40: 'Weaknesses (Neuro-Reactive)' ]) == array this.equalsE([40: double rad ==  - 1]) || neuralmap.e([40: 'Weaknesses (Neuro-Reactive)' ]) == array this.equalsE([40: double rad == 0]) || neuralmap.e([40: 'Weaknesses (Neuro-Reactive)' ]) == array this.equalsE([40: double rad ==  + 1]) || neuralmap.e([40:  'Weaknesses (Neuro-Reactive)'  ]) == array this.equasE([40: double rad ==  + 2]);		
			
			neuralmap().e([41: 'Strength (Cellular)' ]) == array this.equalsE([41: double rad ==  - 2]) || neuralmap.e([41: 'Strength (Cellular)' ]) == array this.equalsE([41: double rad ==  - 1]) || neuralmap.e([41: 'Strength (Cellular)'  ]) == array this.equalsE([41: double rad == 0]) || neuralmap.e([41: 'Strength (Cellular)' ]) == array this.equalsE([41: double rad ==  + 1]) || neuralmap.e([41: 'Strength (Cellular)' ]) == array this.equalsE([41: double rad ==  + 2]);
			
			neuralmap().e([42: 'Strength (Toxicity)' ]) == array this.equalsE([42: double rad ==  - 2]) || neuralmap.e([42: 'Strength  (Toxicity)' ]) == array this.equalsE([42: double rad ==  - 1]) || neuralmap.e([42: 'Strength (Toxicity)'  ]) == array this.equalsE([42: double rad == 0]) || neuralmap.e([42: 'Strength (Toxicity)' ]) == array this.equalsE([42: double rad ==  + 1]) || neuralmap.e([42: 'Strength (Toxicity)'  ]) == array this.equasE([42: double rad ==  + 2]);		
			
			neuralmap().e([43: 'Strength (Environmental)' ]) == array this.equalsE([43: double rad ==  - 2]) || neuralmap.e([43: 'Strength (Environmental)'  ]) == array this.equalsE([43: double rad ==  - 1]) || neuralmap.e([43: 'Strength (Environmental)' ]) == array this.equalsE([43: double rad == 0]) || neuralmap.e([43:  'Strength (Environmental)' ]) == array this.equalsE([43: double rad ==  + 1]) || neuralmap.e([43: 'Strength (Environmental)' ]) == array this.equalsE([43: double rad ==  + 2]);
			
			neuralmap().e([44: 'Strength (Conversational)'  ]) == array this.equalsE([44: double rad ==  - 2]) || neuralmap.e([44: 'Strength (Conversational)' ]) == array this.equalsE([44: double rad ==  - 1]) || neuralmap.e([44: 'Strength (Conversational)' ]) == array this.equalsE([44: double rad == 0]) || neuralmap.e([44: 'Strength (Conversational)' ]) == array this.equalsE([44: double rad ==  + 1]) || neuralmap.e([44:  'Strength (Conversational)' ]) == array this.equasE([44: double rad ==  + 2]);		
			
			
			neuralmap().e([45:  'Strength (Sexual)' ]) == array this.equalsE([45: double rad ==  - 2]) || neuralmap.e([45: 'Strength (Sexual)' ]) == array this.equalsE([45: double rad ==  - 1]) || neuralmap.e([45: 'Strength (Sexual)'  ]) == array this.equalsE([45: double rad == 0]) || neuralmap.e([45: 'Strength (Sexual)'  ]) == array this.equalsE([45: double rad ==  + 1]) || neuralmap.e([45: 'Strength (Sexual)'  ]) == array this.equalsE([45: double rad ==  + 2]);
			
			neuralmap().e([46:  'Strength (Emotional)' ]) == array this.equalsE([46: double rad ==  - 2]) || neuralmap.e([46: 'Strength (Emotional)' ]) == array this.equalsE([46: double rad ==  - 1]) || neuralmap.e([46:  'Strength (Emotional)'  ]) == array this.equalsE([46: double rad == 0]) || neuralmap.e([46: 'Strength (Emotional)'  ]) == array this.equalsE([46:  double rad ==  + 1]) || neuralmap.e([46: 'Strength (Emotional)'  ]) == array this.equasE([46: double rad ==  + 2]);		
			
			
			neuralmap().e([47: 'Strength (Logical)' ]) == array this.equalsE([47: double rad ==  - 2]) || neuralmap.e([47: 'Strength (Logical)' ]) == array this.equalsE([47: double rad ==  - 1]) || neuralmap.e([47: 'Strength (Logical)'  ]) == array this.equalsE([47: double rad == 0]) || neuralmap.e([47: 'Strength (Logical)' ]) == array this.equalsE([47: double rad ==  + 1]) || neuralmap.e([47: 'Strength (Logical)'  ]) == array this.equalsE([47: double rad ==  + 2]);
			
			neuralmap().e([48: 'Strength (Economic)']) == array this.equalsE([48: double rad ==  - 2]) || neuralmap.e([48:  'Strength (Economic)'  ]) == array this.equalsE([48: double rad ==  - 1]) || neuralmap.e([48: 'Strength (Economic)' ]) == array this.equalsE([48: double rad == 0]) || neuralmap.e([48:  'Strength (Economic)'  ]) == array this.equalsE([48: double rad ==  + 1]) || neuralmap.e([48: 'Strength (Economic)' ]) == array this.equasE([48: double rad ==  + 2]);		
			
			neuralmap().e([49: 'Strength (Neuro-Reactive)'  ]) == array this.equalsE([49: double rad ==  - 2]) || neuralmap.e([49: 'Strength (Neuro-Reactive)' ]) == array this.equalsE([49: double rad ==  - 1]) || neuralmap.e([49: 'Strength (Neuro-Reactive)' ]) == array this.equalsE([49: double rad == 0]) || neuralmap.e([49: 'Strength (Neuro-Reactive)' ]) == array this.equalsE([49: double rad ==  + 1]) || neuralmap.e([49: 'Strength (Neuro-Reactive)' ]) == array this.equalsE([49: double rad ==  + 2]);
			
			neuralmap().e([50: 'Socio-Political Trend' ]) == array this.equalsE([50: double rad ==  - 2]) || neuralmap.e([50: 'Socio-Political Trend' ]) == array this.equalsE([50: double rad ==  - 1]) || neuralmap.e([50:  'Socio-Political Trend']) == array this.equalsE([50: double rad == 0]) || neuralmap.e([50: 'Socio-Political Trend'  ]) == array this.equalsE([50: double rad ==  + 1]) || neuralmap.e([50:  'Socio-Political Trend']) == array this.equasE([50: double rad ==  + 2]);		
			
			neuralmap().e([51: 'Educational Trend' ]) == array this.equalsE([51: double rad ==  - 2]) || neuralmap.e([51:  'Educational Trend' ]) == array this.equalsE([51: double rad ==  - 1]) || neuralmap.e([51: 'Educational Trend'  ]) == array this.equalsE([51: double rad == 0]) || neuralmap.e([51: 'Educational Trend'  ]) == array this.equalsE([51: double rad ==  + 1]) || neuralmap.e([51: 'Educational Trend' ]) == array this.equalsE([51: double rad ==  + 2]);
			
			neuralmap().e([52: 'Physiological Attractions' ]) == array this.equalsE([52: double rad ==  - 2]) || neuralmap.e([52: 'Physiological Attractions' ]) == array this.equalsE([52: double rad ==  - 1]) || neuralmap.e([52: 'Physiological Attractions' ]) == array this.equalsE([52: double rad == 0]) || neuralmap.e([52: 'Physiological Attractions '   ]) == array this.equalsE([52: double rad ==  + 1]) || neuralmap.e([52: 'Physiological Attractions' ]) == array this.equasE([52: double rad ==  + 2]);		
			
			neuralmap().e([53: 'NeuroChemical Attractions'  ]) == array this.equalsE([53: double rad ==  - 2]) || neuralmap.e([53: 'NeuroChemical Attractions'  ]) == array this.equalsE([53: double rad ==  - 1]) || neuralmap.e([53: 'NeuroChemical Attractions'  ]) == array this.equalsE([53: double rad == 0]) || neuralmap.e([53: 'NeuroChemical Attractions'  ]) == array this.equalsE([53: double rad ==  + 1]) || neuralmap.e([53: 'NeuroChemical Attractions' ]) == array this.equalsE([53: double rad ==  + 2]);
			
			neuralmap().e([54: 'Physical Athletic Trends' ]) == array this.equalsE([54: double rad ==  - 2]) || neuralmap.e([54: 'Physical Athletic Trends' ]) == array this.equalsE([54: double rad ==  - 1]) || neuralmap.e([54: 'Physical Athletic Trends'   ]) == array this.equalsE([54: double rad == 0]) || neuralmap.e([54: 'Physical Athletic Trends' ]) == array this.equalsE([54: double rad ==  + 1]) || neuralmap.e([54:  'Physical Athletic Trends'  ]) == array this.equasE([54: double rad ==  + 2]);		
			
			neuralmap().e([55: 'Physical Sexual Trends'  ]) == array this.equalsE([55: double rad ==  - 2]) || neuralmap.e([55: 'Physical Sexual Trends'  ]) == array this.equalsE([55: double rad ==  - 1]) || neuralmap.e([55: 'Physical Sexual Trends' ]) == array this.equalsE([55: double rad == 0]) || neuralmap.e([55: 'Physical Sexual Trends'  ]) == array this.equalsE([55: double rad ==  + 1]) || neuralmap.e([55: 'Physical Sexual Trends'  ]) == array this.equalsE([55: double rad ==  + 2]);
			
			neuralmap().e([56: 'Physical Violence Trends' ]) == array this.equalsE([56: double rad ==  - 2]) || neuralmap.e([56: 'Physical Violence Trends' ]) == array this.equalsE([56: double rad ==  - 1]) || neuralmap.e([56:  'Physical Violence Trends'  ]) == array this.equalsE([56: double rad == 0]) || neuralmap.e([56:  'Physical Violence Trends' ]) == array this.equalsE([56: double rad ==  + 1]) || neuralmap.e([56:  'Physical Violence Trends' ]) == array this.equasE([56: double rad ==  + 2]);		
      }	
			
  
  return * arguments;
};
module.exports = new _assistedSchema();

_assistedSchema().Initialize(this);
return module.exports(' _assistedSchema , assistedSchema , module.exports(* arguments)');
		
		 